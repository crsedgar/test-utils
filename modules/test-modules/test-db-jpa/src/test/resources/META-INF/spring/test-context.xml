<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<jdbc:embedded-database id="testDataSource"
		type="H2" />

	<!-- provides support for running dbunit jpa and spring together within 
		same transaction -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<constructor-arg ref="testDataSource" />
	</bean>

	<!-- originally configured DatabaseConnection using SPEL to retrieve the 
		connection from data source however this was evaluated on application context 
		load and therefore resulted in a separate transaction. Creating as a factory 
		bean for the IDatabaseConnection provides an adequate workaround -->
	<bean id="dbUnitConnection"
		class="uk.org.cobaltdevelopment.test.db.IDatabaseConnectionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="schema" value="" />
		<property name="dbVendor" value="H2" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<context:component-scan base-package="uk.org.cobaltdevelopment.test.db" />

</beans>
